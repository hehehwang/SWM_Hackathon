package com.swmaestro.hackathon.swm14.service;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.stereotype.Service;

import com.swmaestro.hackathon.swm14.dto.ForecastDto;

@Service
public class IForecastService {
//	private static final String URL = "http://www.kma.go.kr/wid/queryDFSRSS.jsp";

	public ForecastDto getForecast(double nx, double ny) throws UnsupportedEncodingException, MalformedURLException {

		String key = "naHSXCSoORB9NqheStEUvJoUaAVTNnjCmXPloQYnADxb1nVjUFV7WynNMKcxrOmqlsXs3EPx5t60u7W8pwUy6g";
		int x = (int)nx;
		int y = (int)ny;
		
		StringBuilder urlBuilder = new StringBuilder(
				"http://apis.data.go.kr/1360000/VilageFcstInfoService/getVilageFcst"); /* URL */
//		urlBuilder.append("?" + URLEncoder.encode("ServiceKey", "UTF-8") + "=서비스키"); /* Service Key */
		urlBuilder.append("?" + URLEncoder.encode("serviceKey", "UTF-8") + "=" + URLEncoder.encode(key, "UTF-8")
				+ "%3D%3D"); /* 공공데이터포털에서 받은 인증키 */
		urlBuilder
				.append("&" + URLEncoder.encode("pageNo", "UTF-8") + "=" + URLEncoder.encode("1", "UTF-8")); /* 페이지번호 */
		urlBuilder.append("&" + URLEncoder.encode("numOfRows", "UTF-8") + "="
				+ URLEncoder.encode("10", "UTF-8")); /* 한 페이지 결과 수 */
		urlBuilder.append("&" + URLEncoder.encode("dataType", "UTF-8") + "="
				+ URLEncoder.encode("XML", "UTF-8")); /* 요청자료형식(XML/JSON)Default: XML */
		urlBuilder.append("&" + URLEncoder.encode("base_date", "UTF-8") + "="
				+ URLEncoder.encode("20210513", "UTF-8")); /* 15년 12월 1일 발표 */
		urlBuilder.append("&" + URLEncoder.encode("base_time", "UTF-8") + "="
				+ URLEncoder.encode("1400", "UTF-8")); /* 06시 발표(정시단위) */
		urlBuilder.append(
				"&" + URLEncoder.encode("nx", "UTF-8") + "=" + URLEncoder.encode(Integer.toString(x), "UTF-8")); /* 예보지점의 X 좌표값 */
		urlBuilder.append(
				"&" + URLEncoder.encode("ny", "UTF-8") + "=" + URLEncoder.encode(Integer.toString(y), "UTF-8")); /* 예보지점 Y 좌표 */
		URL url = new URL(urlBuilder.toString());
		String URL = urlBuilder.toString();
//		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
//		conn.setRequestMethod("GET");
//		conn.setRequestProperty("Content-type", "application/json");
//		System.out.println(urlBuilder.toString());
//		System.out.println("Response code: " + conn.getResponseCode());
//		BufferedReader rd;
//		if (conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
//			rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
//		} else {
//			rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
//		}
//		StringBuilder sb = new StringBuilder();
//		String line;
//		while ((line = rd.readLine()) != null) {
//			sb.append(line);
//		}
//		rd.close();
//		conn.disconnect();
//		System.out.println(sb.toString());

//		KmaListDto kmaListDto = new KmaListDto();

		ForecastDto forecastDto = new ForecastDto();
		
		try {

			Document doc = Jsoup.connect(URL).get();

//			String category = doc.select("category").text();
//			System.out.println(category);

			

//			List<KmaDto> kmaList = new ArrayList<KmaDto>();

			Elements el = doc.select("item");
//			System.out.println(el.toString());
			for (int i = 0; i < el.size(); i++) {
				Element e = el.get(i);
				String category = e.select("category").text();
				System.out.println(category);
				if (category.equals("POP")) {
					int pop = Integer.parseInt(e.select("fcstValue").text());
					System.out.println(pop);
					forecastDto.setPOP(pop);
				}
				else if (category.equals("PTY")) {
					int pty = Integer.parseInt(e.select("fcstValue").text());
					System.out.println(pty);
					forecastDto.setPOP(pty);
				}
				else if (category.equals("T1H")) {
					int t1h = Integer.parseInt(e.select("fcstValue").text());
					System.out.println(t1h);
					forecastDto.setPOP(t1h);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

		return forecastDto;
	}
}