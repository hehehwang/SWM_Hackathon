package com.swmaestro.hackathon.swm14.controller;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.swmaestro.hackathon.swm14.dto.Playlist;
import com.swmaestro.hackathon.swm14.service.IPlaylistService;
import com.swmaestro.hackathon.swm14.service.impl.PlaylistServiceImpl;

import io.swagger.annotations.ApiOperation;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/playlist")
public class PlaylistController {
	public static final Logger logger = LoggerFactory.getLogger(PlaylistController.class);

	@Autowired
	private Playlist playlist;
	
	@Autowired
	private IPlaylistService playlistService;
	
	@Autowired
	public PlaylistController(IPlaylistService playlistService) {
		Assert.notNull(playlistService, "playlistService 개체가 반드시 필요!");
		this.playlistService = playlistService;
	}
	
	// 모든 플레이리스트 목록 조회(카테고리별)
		@ApiOperation(value = "모든 Playlist 조회")
		@GetMapping("/all")
		public ResponseEntity<HashMap<String, Object>> getAllPlaylists(@PathVariable("day") int day, HttpServletRequest request) throws Exception {
			HashMap<String, Object> map = new HashMap<String, Object>();
			
			List<Playlist> playlists = playlist.ge
			
			map.put("data", gifticons);
			return new ResponseEntity<HashMap<String, Object>>(map, HttpStatus.OK);
		}
//	@Autowired
//	private IUserGifticonService uGiftService;

//	@Autowired
//	public PlaylistController(IUserGifticonService uGiftService) {
//		Assert.notNull(uGiftService, "uGiftService 개체가 반드시 필요!");
//		this.uGiftService = uGiftService;
//	}

}
